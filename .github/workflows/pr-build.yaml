name: terragrunt plan

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  build-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: Comment on PR that we running a new build
        id: comment-on-job-build-start
        uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            # starting build for commit: ${{ github.sha }}

      - name: set matrix of build jobs
        id: set-matrix
        run: |
          git diff --name-only HEAD^ HEAD | grep \.hcl | xargs -i sh -c "test -e {} && echo {}" | xargs -i dirname {} | sort -u > dirs.txt
          tf_config=''

          while IFS= read -r dir
          do
            if [[ -z $tf_config ]]; then
              tf_config="{\"tf_config\":\"$dir\"}"
            else
              tf_config="$tf_config, {\"tf_config\":\"$dir\"}"
            fi
          done < dirs.txt

          tf_config="{\"include\":[$tf_config]}"
          echo "::set-output name=matrix::$tf_config"

          dirs="EMPTY$(cat dirs.txt)"
          echo "::set-output name=dirs::$dirs"


  plan:
    if: ${{ needs.build-matrix.outputs.dirs == 'EMPTY' }}
    needs: [build-matrix]
    runs-on: [self-hosted, linux]
    strategy:
      matrix: ${{fromJson(needs.build-matrix.outputs.matrix)}}
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: run terragrunt plan
        id: terragrunt-plan
        env:
          AWS_ACCOUNTS_KEYS: ${{ secrets.AWS_ACCOUNTS_ACCESS_KEYS }}
        run: |
          set -o pipefail +e
          echo "matrix is: ${{ needs.build-matrix.outputs.matrix }}"
          echo "my job is: ${{ matrix.tf_config }}"
          if ( echo "${{ matrix.tf_config }}" | grep "aws/" ); then
            cd ${{ matrix.tf_config }}

            # find out the account we need to update
            # aws/< account name >/< env >/< tf component >/
            export AWS_ACCOUNT_NAME=`echo "${{ matrix.tf_config }}" | cut -f2 -d "/"`

            # retrieve the creds from the env
            export AWS_ACCESS_KEY_ID=`echo $AWS_ACCOUNT_KEYS | grep "$AWS_ACCOUNT_NAME" | cut -f2 -d ":"`
            export AWS_SECRET_ACCESS_KEY=`echo $AWS_ACCOUNT_KEYS | grep "$AWS_ACCOUNT_NAME" | cut -f3 -d ":"`
            export TGENV_NO_COLOR=true
            export TFENV_NO_COLOR=true

            echo "# OUTPUT FOR JOB: ${{matrix.tf_config}}" > log.txt
            echo >> log.txt
            echo >> log.txt

            # we disabled -e , so that we can fail and still collect the output
            # from all failed actions
            tgenv install 2>&1 | tee -a log.txt
            let rc=$rc+$?

            if [ $rc -lt 1 ]; then
              tfenv install 2>&1 | tee -a log.txt
              let rc=$?
            fi

            if [ $rc -lt 1 ]; then
              terragrunt init -no-color 2>&1 | tee -a log.txt
              let rc=$?
            fi

            if [ $rc -lt 1 ]; then
              terragrunt plan -no-color 2>&1 | tee -a log.txt
              let rc=$?
            fi

            # https://github.community/t/set-output-truncates-multiline-strings/16852/6
            OUTPUT=$(cat log.txt)
            OUTPUT="${OUTPUT//'%'/'%25'}"
            OUTPUT="${OUTPUT//$'\n'/'%0A'}"
            OUTPUT="${OUTPUT//$'\r'/'%0D'}"

            echo "::set-output name=content::$OUTPUT"

            if [ $rc -lt 1 ]; then
              echo "::set-output name=emoji:: "
            else
              echo "::set-output name=emoji::-1"
            fi

            exit $rc
          fi

      - name: Create comment on PR
        if: ${{ always() }}
        id: comment
        uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ${{join(steps.terragrunt-plan.outputs.content, '\n')}}
          reactions: ${{ steps.terragrunt-plan.outputs.emoji }}
