name: terragrunt

on:
  pull_request:
    types: [opened, synchronize]
  push:
    branches: main

jobs:
  build-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      # ON a PR branch build:
      # notify on the PR that we are starting a new build for this commit
      # each job will be posting the result of the terragrunt plan after
      # this comment.
      - name: Comment on PR that we running a new build
        if: ${{ github.ref != 'refs/heads/main' }}
        id: comment-on-job-build-start
        uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            # starting build for commit: ${{ github.sha }}

      # build a matrix of jobs to build based on the list of files changed.
      # each job runs in a particular directory containing a terragrunt.hcl file
      - name: set matrix of build jobs
        id: set-matrix
        run: |
          # gather the list of change files, and filter for .hcl files only
          # check if those are not git files being deleted
          # gather the directory for each file and remove any dups
          git diff --name-only HEAD^ HEAD | grep \.hcl | xargs -i sh -c "test -e {} && echo {}" | xargs -i dirname {} | sort -u > dirs.txt
          tf_config=''

          # build the json payload with all the directories that contain
          # changed files.
          while IFS= read -r dir
          do
            if [[ -z $tf_config ]]; then
              tf_config="{\"tf_config\":\"$dir\"}"
            else
              tf_config="$tf_config, {\"tf_config\":\"$dir\"}"
            fi
          done < dirs.txt

          tf_config="{\"include\":[$tf_config]}"
          echo "::set-output name=matrix::$tf_config"

          # and pass the list of directories, which we will use to invalidate
          # the matrix job if there are not terragrunt related changes.
          dirs="EMPTY$(cat dirs.txt)"
          if [ ! -s dirs.txt ]; then
            echo "::set-output name=dirs::EMPTY"
          else
            echo "::set-output name=dirs::NOT_EMPTY"
          fi

  # terragrunt job
  terragrunt:
    # only run this job if there are changed terragrunt files.
    if: ${{ needs.build-matrix.outputs.dirs != 'EMPTY' }}
    needs: [build-matrix]
    # we have a custom docker image with terragrunt and other tooling
    runs-on: [self-hosted, linux]
    strategy:
      # for each directory containing terraform changed files we spin up
      # a new build job
      matrix: ${{fromJson(needs.build-matrix.outputs.matrix)}}
      # don't kill the jobs as it will cause orphan terraform locks
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: run terragrunt
        id: terragrunt
        env:
          # contains all the AWS keys for all the envs
          AWS_ACCOUNTS_KEYS: ${{ secrets.AWS_ACCOUNTS_ACCESS_KEYS }}
        run: |
          set -o pipefail +e
          echo "my job is: ${{ matrix.tf_config }}"
          # only run terraform if this is a aws/< account >/ change
          if ( echo "${{ matrix.tf_config }}" | grep "aws/" ); then
            cd ${{ matrix.tf_config }}

            # find out the account we need to update
            # aws/< account name >/< env >/< tf component >/
            export AWS_ACCOUNT_NAME=`echo "${{ matrix.tf_config }}" | cut -f2 -d "/"`

            # retrieve the creds from the env
            export AWS_ACCESS_KEY_ID=`echo $AWS_ACCOUNT_KEYS | grep "$AWS_ACCOUNT_NAME" | cut -f2 -d ":"`
            export AWS_SECRET_ACCESS_KEY=`echo $AWS_ACCOUNT_KEYS | grep "$AWS_ACCOUNT_NAME" | cut -f3 -d ":"`

            # we will save the log for this job, and post it to github as a
            # comment
            echo "# OUTPUT FOR JOB: ${{matrix.tf_config}}" > log.txt
            echo >> log.txt
            echo >> log.txt

            # we disabled -e , so that we can fail and still collect the output
            # from all failed actions
            tgenv install 2>&1 | tee -a log.txt
            let rc=$rc+$?

            if [ $rc -lt 1 ]; then
              tfenv install 2>&1 | tee -a log.txt
              let rc=$?
            fi

            if [ $rc -lt 1 ]; then
              terragrunt init -no-color 2>&1 | tee -a log.txt
              let rc=$?
            fi

            # set the terragrunt action based on if we are on a main build
            # or on a PR build
            if [ "${{ github.ref }}" == "ref/heads/main"]; then
              ACTION="apply -auto-approve"
            else
              ACTION="plan"
            fi

            if [ $rc -lt 1 ]; then
              terragrunt $ACTION -no-color 2>&1 | tee -a log.txt
              let rc=$?
            fi

            # https://github.community/t/set-output-truncates-multiline-strings/16852/6
            # github-actions is just a collection of horrid hacks.
            OUTPUT=$(cat log.txt)
            OUTPUT="${OUTPUT//'%'/'%25'}"
            OUTPUT="${OUTPUT//$'\n'/'%0A'}"
            OUTPUT="${OUTPUT//$'\r'/'%0D'}"

            echo "::set-output name=content::$OUTPUT"

            # prepare an emoji to be used in github pull request comment
            # use -1 if the plan failed. this will make looking for errors
            # a bit easier through the github comments.
            if [ $rc -lt 1 ]; then
              echo "::set-output name=emoji:: "
            else
              echo "::set-output name=emoji::-1"
            fi

            exit $rc
          fi

      # ON PR build only:
      # update the PR with the terragrunt plan output
      - name: Create comment on PR
        if: ${{  github.ref != 'ref/heads/main' }}
        id: comment
        uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ${{join(steps.terragrunt.outputs.content, '\n')}}
          reactions: ${{ steps.terragrunt.outputs.emoji }}

      # ON main build only:
      - name: Slack Notification
        if: ${{ github.ref == 'ref/heads/main' }}
        id: slack
        uses: act10ns/slack@v1
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        with:
          status: ${{ needs.apply.job.status }}
          steps: ${{ toJson(needs.apply.steps) }}
          channel: '#scratch0'


  # ON PR build only:
  # create one last comment on the github pull request, marking that all the
  # jobs have finished for this commit id.
  end-build-comment:
    if: ${{ github.ref != 'ref/heads/main' }}
    runs-on: ubuntu-latest
    needs: [terragrunt]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      # notify on the PR that we finished the build for this commit
      - name: Comment on PR that we running a new build
        id: comment-on-job-build-end
        uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            # finished build for commit: ${{ github.sha }}
