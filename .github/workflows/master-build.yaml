name: terragrunt apply
# do not allow multiple master build workflows running concurrently
concurrency: master-build

on:
  push:
    branches: main

jobs:
  build-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      run: ${{ steps.set-matrix.outputs.run }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          echo "$GITHUB_CONTEXT"

      # build a matrix of jobs to build based on the list of files changed.
      # each job runs in a particular directory containing a terragrunt.hcl file
      - name: set matrix of build jobs
        id: set-matrix
        run: |
          # gather the list of changed files, and filter for .hcl files only
          # check if those are not git files being deleted
          # gather the directory for each file and remove any dups
          git diff --name-only HEAD^ HEAD | grep \.hcl | xargs -i sh -c "test -e {} && echo {}" | xargs -i dirname {} | sort -u > dirs.txt
          tf_config=''

          # build the json payload with all the directories that contain
          # changed files.
          while IFS= read -r dir
          do
            if [[ -z $tf_config ]]; then
              tf_config="{\"tf_config\":\"$dir\"}"
            else
              tf_config="$tf_config, {\"tf_config\":\"$dir\"}"
            fi
          done < dirs.txt

          # set the matrix output with the list of all directories to build
          tf_config="{\"include\":[$tf_config]}"
          echo "::set-output name=matrix::$tf_config"

          # and pass a flag, which we will use to invalidate
          # the matrix job if there are not terragrunt related changes.
          dirs="EMPTY$(cat dirs.txt)"
          if [ -s dirs.txt ]; then
            echo "::set-output name=run::true"
          else
            echo "::set-output name=run::false"
          fi

  # terragrunt apply job
  apply:
    id: apply
    needs: [build-matrix]
    # only run this job if there are changed terragrunt files.
    if: ${{ needs.build-matrix.outputs.run == 'true' }}
    # we have a custom docker image with terragrunt and other tooling
    runs-on: [self-hosted, linux]
    strategy:
      # for each directory containing terraform changed files we spin up
      # a new build job
      matrix: ${{fromJson(needs.build-matrix.outputs.matrix)}}
      # don't kill the jobs as it will cause orphan terraform locks
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: run terragrunt apply
        id: terragrunt-apply
        env:
          # contains all the AWS keys for all the envs
          AWS_ACCOUNTS_KEYS: ${{ secrets.AWS_ACCOUNTS_ACCESS_KEYS }}
        run: |
          set -o pipefail +e
          echo "my job is: ${{ matrix.tf_config }}"
          # only run terraform if this is a aws/< account >/ change
          if ( echo "${{ matrix.tf_config }}" | grep "aws/" ); then
            cd ${{ matrix.tf_config }}

            # find out the account we need to update
            # aws/< account name >/< env >/< tf component >/
            export AWS_ACCOUNT_NAME=`echo "${{ matrix.tf_config }}" | cut -f2 -d "/"`

            # retrieve the creds from the env
            export AWS_ACCESS_KEY_ID=`echo $AWS_ACCOUNT_KEYS | grep "$AWS_ACCOUNT_NAME" | cut -f2 -d ":"`
            export AWS_SECRET_ACCESS_KEY=`echo $AWS_ACCOUNT_KEYS | grep "$AWS_ACCOUNT_NAME" | cut -f3 -d ":"`

            # attempt to make tgenv, tfenv friendly to CI
            export TGENV_NO_COLOR=true
            export TFENV_NO_COLOR=true

            tgenv install
            let rc=$rc+$?

            if [ $rc -lt 1 ]; then
              tfenv install
              let rc=$?
            fi

            if [ $rc -lt 1 ]; then
              terragrunt init -no-color
              let rc=$?
            fi

            if [ $rc -lt 1 ]; then
              terragrunt apply -no-color -auto-approve
              let rc=$?
            fi

            exit $rc
          fi

  # end-build-comment:
  #   needs: [apply]
  #   if: ${{  needs.apply.job.status != 'cancelled' }}
  #   runs-on: ubuntu-latest
  #   steps:
  #
  #     - name: Slack Notification
  #       # when the job is skipped, this slack action blows up as there is
  #       # no job.status or steps to pass to the call
  #       id: slack
  #       uses: act10ns/slack@v1
  #       env:
  #         SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
  #       with:
  #         status: ${{ needs.apply.job.status }}
  #         steps: ${{ toJson(needs.apply.steps) }}
  #         channel: '#scratch0'
